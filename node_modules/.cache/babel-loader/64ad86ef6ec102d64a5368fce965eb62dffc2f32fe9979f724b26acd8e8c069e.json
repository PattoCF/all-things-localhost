{"ast":null,"code":"import { cx, css } from 'emotion';\nimport c from 'react';\nimport { Stack, Box, Flex } from '@contentful/f36-core';\nimport o from '@contentful/f36-tokens';\nimport { hexToRGBA } from '@contentful/f36-utils';\nimport { Spinner } from '@contentful/f36-spinner';\nvar eo = Object.defineProperty,\n  ro = Object.defineProperties;\nvar no = Object.getOwnPropertyDescriptors;\nvar T = Object.getOwnPropertySymbols;\nvar D = Object.prototype.hasOwnProperty,\n  G = Object.prototype.propertyIsEnumerable;\nvar A = (t, e, r) => e in t ? eo(t, e, {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0,\n    value: r\n  }) : t[e] = r,\n  i = (t, e) => {\n    for (var r in e || (e = {})) D.call(e, r) && A(t, r, e[r]);\n    if (T) for (var r of T(e)) G.call(e, r) && A(t, r, e[r]);\n    return t;\n  },\n  h = (t, e) => ro(t, no(e));\nvar b = (t, e) => {\n  var r = {};\n  for (var n in t) D.call(t, n) && e.indexOf(n) < 0 && (r[n] = t[n]);\n  if (t != null && T) for (var n of T(t)) e.indexOf(n) < 0 && G.call(t, n) && (r[n] = t[n]);\n  return r;\n};\nvar O = ({\n    withDivider: t\n  }) => {\n    let e = so(t);\n    return {\n      buttonGroup: css({\n        display: \"inline-flex\",\n        position: \"relative\"\n      }),\n      groupContent: css(i({\n        borderRadius: \"0 !important\",\n        marginRight: \"-1px\",\n        \"&:first-child\": {\n          borderBottomLeftRadius: `${o.borderRadiusMedium} !important`,\n          borderTopLeftRadius: `${o.borderRadiusMedium} !important`\n        },\n        \"&:last-child\": {\n          borderBottomRightRadius: `${o.borderRadiusMedium} !important`,\n          borderTopRightRadius: `${o.borderRadiusMedium} !important`,\n          marginRight: 0\n        },\n        \"&:focus\": {\n          zIndex: o.zIndexDefault\n        }\n      }, e))\n    };\n  },\n  so = t => {\n    if (!t) return {};\n    let e = `1px solid ${hexToRGBA(o.colorWhite, .2)}`;\n    return {\n      borderTop: \"none\",\n      borderBottom: \"none\",\n      \"&:not(:first-child,:focus-visible)\": {\n        borderLeft: e\n      },\n      \"&:not(:last-child,:focus-visible)\": {\n        borderRight: e\n      }\n    };\n  };\nfunction U(t, e) {\n  let {\n      variant: r = \"merged\",\n      withDivider: n,\n      testId: s = \"cf-ui-button-group\",\n      children: l,\n      className: a,\n      spacing: p\n    } = t,\n    d = O({\n      withDivider: n\n    });\n  return r === \"spaced\" ? c.createElement(Stack, {\n    className: a,\n    isInline: !0,\n    flexDirection: \"row\",\n    testId: s,\n    ref: e,\n    spacing: p\n  }, l) : c.createElement(Box, {\n    testId: s,\n    ref: e,\n    className: cx(d.buttonGroup, a)\n  }, c.Children.map(l, (m, g) => m ? c.cloneElement(m, {\n    key: g,\n    className: cx(d.groupContent, m.props.className)\n  }) : null));\n}\nU.displayName = \"ButtonGroup\";\nvar L = c.forwardRef(U);\nvar x = t => {\n    switch (t) {\n      case \"primary\":\n        return {\n          backgroundColor: o.blue700\n        };\n      case \"secondary\":\n        return {\n          backgroundColor: o.gray200\n        };\n      case \"positive\":\n        return {\n          backgroundColor: o.green700\n        };\n      case \"negative\":\n        return {\n          backgroundColor: o.gray200\n        };\n      case \"transparent\":\n        return {\n          backgroundColor: hexToRGBA(o.gray900, .1)\n        };\n      default:\n        return {};\n    }\n  },\n  po = t => {\n    switch (t) {\n      case \"primary\":\n        return {\n          color: o.colorWhite,\n          backgroundColor: o.blue500,\n          borderColor: \"transparent\",\n          \"&:hover\": {\n            backgroundColor: o.blue600,\n            color: o.colorWhite\n          },\n          \"&:active\": x(t),\n          \"&:focus-visible\": {\n            boxShadow: o.glowPrimary\n          }\n        };\n      case \"secondary\":\n        return {\n          color: o.gray900,\n          backgroundColor: o.colorWhite,\n          borderColor: o.gray300,\n          \"&:hover\": {\n            backgroundColor: o.gray100,\n            color: o.gray900\n          },\n          \"&:active\": x(t),\n          \"&:focus\": {\n            boxShadow: o.glowPrimary\n          },\n          \"&:focus:not(:focus-visible)\": {\n            boxShadow: \"unset\"\n          },\n          \"&:focus-visible\": {\n            boxShadow: o.glowPrimary\n          }\n        };\n      case \"positive\":\n        return {\n          color: o.colorWhite,\n          backgroundColor: o.green500,\n          borderColor: \"transparent\",\n          \"&:hover\": {\n            backgroundColor: o.green600,\n            color: o.colorWhite\n          },\n          \"&:active\": x(t),\n          \"&:focus-visible\": {\n            boxShadow: o.glowPositive\n          }\n        };\n      case \"negative\":\n        return {\n          color: o.red600,\n          backgroundColor: o.colorWhite,\n          borderColor: o.gray300,\n          \"&:hover\": {\n            backgroundColor: o.gray100,\n            color: o.red600\n          },\n          \"&:active\": x(t),\n          \"&:focus-visible\": {\n            boxShadow: o.glowNegative\n          }\n        };\n      case \"transparent\":\n        return {\n          color: o.gray900,\n          background: \"none\",\n          borderColor: \"transparent\",\n          boxShadow: \"none\",\n          \"&:hover\": {\n            backgroundColor: hexToRGBA(o.gray900, .05)\n          },\n          \"&:active\": x(t),\n          \"&:focus\": {\n            boxShadow: o.glowPrimary\n          },\n          \"&:focus:not(:focus-visible)\": {\n            boxShadow: \"unset\"\n          },\n          \"&:focus-visible\": {\n            boxShadow: o.glowPrimary\n          }\n        };\n      default:\n        return {};\n    }\n  },\n  co = t => {\n    switch (t) {\n      case \"small\":\n        return {\n          fontSize: o.fontSizeM,\n          lineHeight: o.lineHeightCondensed,\n          padding: `${o.spacing2Xs} ${o.spacingS}`,\n          minHeight: \"32px\"\n        };\n      case \"medium\":\n        return {\n          fontSize: o.fontSizeM,\n          lineHeight: o.lineHeightCondensed,\n          padding: `${o.spacingXs} ${o.spacingM}`,\n          minHeight: \"40px\"\n        };\n      case \"large\":\n        return {\n          fontSize: o.fontSizeXl,\n          lineHeight: o.lineHeightXl,\n          padding: `${o.spacingXs} ${o.spacingM}`,\n          minHeight: \"48px\"\n        };\n      default:\n        return {};\n    }\n  },\n  uo = ({\n    hasChildren: t,\n    variant: e\n  }) => {\n    let r = {\n      \"&:first-child\": {\n        marginRight: o.spacing2Xs\n      },\n      \"&:last-child\": {\n        marginLeft: o.spacing2Xs\n      }\n    };\n    return css([t ? r : {}, e !== \"transparent\" && t && {\n      \"& svg\": {\n        fill: \"currentColor\"\n      }\n    }]);\n  },\n  W = () => ({\n    button: ({\n      variant: t,\n      size: e,\n      isActive: r,\n      isDisabled: n,\n      isFullWidth: s\n    }) => css(i(i(i({\n      boxSizing: \"border-box\",\n      border: \"1px solid\",\n      boxShadow: \"0px 1px 0px rgb(25, 37, 50, 0.08)\",\n      borderRadius: o.borderRadiusMedium,\n      cursor: n ? \"not-allowed\" : \"pointer\",\n      fontFamily: o.fontStackPrimary,\n      opacity: n ? .5 : 1,\n      display: s ? \"flex\" : \"inline-flex\",\n      minWidth: s ? \"100%\" : \"auto\",\n      maxWidth: s ? \"100%\" : \"240px\",\n      overflow: \"hidden\",\n      flexShrink: 0,\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      fontWeight: o.fontWeightMedium,\n      outline: \"none\",\n      textDecoration: \"none\",\n      margin: 0,\n      transition: `background ${o.transitionDurationShort} ${o.transitionEasingDefault},\n        opacity ${o.transitionDurationDefault} ${o.transitionEasingDefault},\n        border-color ${o.transitionDurationDefault} ${o.transitionEasingDefault}`\n    }, po(t)), co(e)), r ? {\n      transition: \"none\",\n      \"&, &:focus\": x(t)\n    } : {})),\n    buttonIcon: uo,\n    buttonContent: css({\n      whiteSpace: \"nowrap\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\"\n    })\n  });\nvar bo = \"button\";\nfunction H(t, e) {\n  let r = W(),\n    k = t,\n    {\n      as: n = bo,\n      children: s,\n      className: l,\n      testId: a = \"cf-ui-button\",\n      variant: p = \"secondary\",\n      size: d = \"medium\",\n      startIcon: m,\n      endIcon: g,\n      isActive: v,\n      isDisabled: P,\n      isLoading: f,\n      isFullWidth: Y,\n      style: Z\n    } = k,\n    w = b(k, [\"as\", \"children\", \"className\", \"testId\", \"variant\", \"size\", \"startIcon\", \"endIcon\", \"isActive\", \"isDisabled\", \"isLoading\", \"isFullWidth\", \"style\"]),\n    oo = cx(r.button({\n      variant: p,\n      size: d,\n      isActive: v,\n      isDisabled: P,\n      isFullWidth: Y\n    }), l),\n    E = I => {\n      var z;\n      let to = {\n        primary: \"white\",\n        secondary: \"secondary\",\n        positive: \"white\",\n        negative: \"negative\",\n        transparent: \"secondary\"\n      };\n      return !f && c.createElement(Flex, {\n        as: \"span\",\n        className: r.buttonIcon({\n          hasChildren: !!s,\n          variant: p\n        })\n      }, c.cloneElement(I, {\n        size: (z = I.props.size) != null ? z : `${d === \"large\" ? \"medium\" : \"small\"}`,\n        variant: p === \"transparent\" && I.props.variant || to[p]\n      }));\n    },\n    R = c.createElement(c.Fragment, null, m && E(m), s && c.createElement(Box, {\n      as: \"span\",\n      display: \"block\",\n      className: r.buttonContent\n    }, s), g && E(g), f && c.createElement(Box, {\n      as: \"span\",\n      marginLeft: s || !f ? \"spacingXs\" : \"none\"\n    }, c.createElement(Spinner, {\n      customSize: 18,\n      variant: p === \"secondary\" || p === \"negative\" ? \"default\" : \"white\"\n    }))),\n    N = {\n      \"data-test-id\": a,\n      className: oo,\n      ref: e,\n      style: Z\n    };\n  return n === \"a\" ? c.createElement(\"a\", h(i(i({}, w), N), {\n    disabled: P\n  }), R) : c.createElement(\"button\", h(i(i({\n    type: \"button\"\n  }, w), N), {\n    disabled: P\n  }), R);\n}\nH.displayName = \"Button\";\nvar B = c.forwardRef(H);\nvar xo = ({\n    isActive: t,\n    isDisabled: e\n  }) => {\n    let r = {\n        background: o.blue100,\n        borderColor: o.blue600,\n        \"&\": {\n          zIndex: o.zIndexDefault + 1\n        },\n        \"&:hover\": {\n          background: o.blue100\n        }\n      },\n      n = {\n        \"&:focus\": {\n          boxShadow: o.glowPrimary\n        },\n        \"&:focus-visible:not([disabled])\": {\n          zIndex: o.zIndexDefault + 2\n        },\n        \"&:active, &:active:hover\": e ? {\n          background: o.colorWhite,\n          borderColor: o.gray300\n        } : {\n          background: o.blue100,\n          borderColor: o.blue600\n        }\n      };\n    return t ? i(i({}, n), r) : n;\n  },\n  X = ({\n    isActive: t,\n    isDisabled: e\n  }) => ({\n    toggleButton: css(xo({\n      isActive: t,\n      isDisabled: e\n    }))\n  });\nfunction V(t, e) {\n  let f = t,\n    {\n      testId: r = \"cf-ui-toggle-button\",\n      children: n,\n      className: s,\n      isDisabled: l = !1,\n      isActive: a = !1,\n      icon: p,\n      onToggle: d,\n      size: m = \"medium\"\n    } = f,\n    g = b(f, [\"testId\", \"children\", \"className\", \"isDisabled\", \"isActive\", \"icon\", \"onToggle\", \"size\"]),\n    v = X({\n      isActive: a,\n      isDisabled: l\n    });\n  return c.createElement(B, i({\n    testId: r,\n    type: \"button\",\n    ref: e,\n    size: m,\n    onClick: () => {\n      !l && d && d();\n    },\n    className: cx(v.toggleButton, s),\n    startIcon: p,\n    isDisabled: l,\n    \"aria-pressed\": a,\n    \"data-state\": a ? \"on\" : \"off\"\n  }, g), n);\n}\nV.displayName = \"ToggleButton\";\nvar q = c.forwardRef(V);\nfunction K(t, e) {\n  let a = t,\n    {\n      testId: r = \"cf-ui-icon-button\",\n      variant: n = \"transparent\",\n      icon: s\n    } = a,\n    l = b(a, [\"testId\", \"variant\", \"icon\"]);\n  return c.createElement(B, h(i({\n    testId: r,\n    ref: e,\n    variant: n\n  }, l), {\n    startIcon: s\n  }));\n}\nK.displayName = \"IconButton\";\nvar Q = c.forwardRef(K);\nexport { B as Button, L as ButtonGroup, Q as IconButton, q as ToggleButton };\n//# sourceMappingURL=out.js.map","map":{"version":3,"names":["c","Stack","Box","Flex"],"sources":["/Users/patrick.geers/Documents/dev/all-things-localhost/node_modules/@contentful/f36-button/src/ButtonGroup/ButtonGroup.tsx","/Users/patrick.geers/Documents/dev/all-things-localhost/node_modules/@contentful/f36-button/src/ButtonGroup/ButtonGroup.styles.ts","/Users/patrick.geers/Documents/dev/all-things-localhost/node_modules/@contentful/f36-button/src/ToggleButton/ToggleButton.tsx","/Users/patrick.geers/Documents/dev/all-things-localhost/node_modules/@contentful/f36-button/src/Button/Button.tsx","/Users/patrick.geers/Documents/dev/all-things-localhost/node_modules/@contentful/f36-button/src/Button/Button.styles.ts","/Users/patrick.geers/Documents/dev/all-things-localhost/node_modules/@contentful/f36-button/src/ToggleButton/ToggleButton.styles.ts","/Users/patrick.geers/Documents/dev/all-things-localhost/node_modules/@contentful/f36-button/src/IconButton/IconButton.tsx"],"sourcesContent":["import { cx } from 'emotion';\nimport React from 'react';\nimport { Box, Stack, type ExpandProps } from '@contentful/f36-core';\nimport getStyles from './ButtonGroup.styles';\nimport type { ButtonGroupProps } from './types';\n\nfunction _ButtonGroup(\n  props: ExpandProps<ButtonGroupProps>,\n  ref: React.Ref<HTMLDivElement>,\n) {\n  const {\n    variant = 'merged',\n    withDivider,\n    testId = 'cf-ui-button-group',\n    children,\n    className,\n    spacing,\n  } = props;\n  const styles = getStyles({ withDivider });\n\n  if (variant === 'spaced') {\n    return (\n      <Stack\n        className={className}\n        isInline\n        flexDirection=\"row\"\n        testId={testId}\n        ref={ref}\n        spacing={spacing}\n      >\n        {children}\n      </Stack>\n    );\n  }\n\n  return (\n    <Box\n      testId={testId}\n      ref={ref}\n      className={cx(styles.buttonGroup, className)}\n    >\n      {React.Children.map(children, (child, key) => {\n        if (!child) {\n          return null;\n        }\n        return React.cloneElement(child as React.ReactElement, {\n          key,\n          className: cx(\n            styles.groupContent,\n            (child as React.ReactElement).props.className,\n          ),\n        });\n      })}\n    </Box>\n  );\n}\n\n_ButtonGroup.displayName = 'ButtonGroup';\n\nexport const ButtonGroup = React.forwardRef(_ButtonGroup);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { hexToRGBA } from '@contentful/f36-utils';\nimport type { CSSObject } from '@emotion/serialize';\nimport type { GetStyleArguments } from './types';\n\nexport default ({ withDivider }: GetStyleArguments) => {\n  const dividerStyle = getDividerStyle(withDivider);\n\n  return {\n    buttonGroup: css({\n      display: 'inline-flex',\n      position: 'relative',\n    }),\n    groupContent: css({\n      borderRadius: '0 !important',\n      marginRight: '-1px',\n      '&:first-child': {\n        borderBottomLeftRadius: `${tokens.borderRadiusMedium} !important`,\n        borderTopLeftRadius: `${tokens.borderRadiusMedium} !important`,\n      },\n      '&:last-child': {\n        borderBottomRightRadius: `${tokens.borderRadiusMedium} !important`,\n        borderTopRightRadius: `${tokens.borderRadiusMedium} !important`,\n        marginRight: 0,\n      },\n      '&:focus': {\n        zIndex: tokens.zIndexDefault,\n      },\n      ...dividerStyle,\n    }),\n  };\n};\n\nconst getDividerStyle = (withDivider: boolean): CSSObject => {\n  if (!withDivider) return {};\n\n  const divider = `1px solid ${hexToRGBA(tokens.colorWhite, 0.2)}`;\n\n  return {\n    borderTop: 'none',\n    borderBottom: 'none',\n    '&:not(:first-child,:focus-visible)': {\n      borderLeft: divider,\n    },\n    '&:not(:last-child,:focus-visible)': {\n      borderRight: divider,\n    },\n  };\n};\n","import React from 'react';\nimport { cx } from 'emotion';\nimport type { CommonProps, ExpandProps } from '@contentful/f36-core';\nimport { Button } from '../Button';\nimport getStyles from './ToggleButton.styles';\nimport { ButtonSize } from '../types';\n\nexport interface ToggleButtonProps extends CommonProps {\n  /**\n   * Applies active styles\n   * @default false\n   */\n  isActive?: boolean;\n  /**\n   * Disabled interaction and applies disabled styles\n   * @default false\n   */\n  isDisabled?: boolean;\n  /**\n   * Expects any of the icon components\n   */\n  icon?: React.ReactElement;\n  /**\n   * Function triggered when the toggle button is clicked.\n   */\n  onToggle: () => void;\n\n  /**\n   * Determines size variation of Button component\n   * @default medium\n   */\n  size?: ButtonSize;\n\n  /**\n   * Aria label is required when using icon only\n   */\n  'aria-label'?: string;\n\n  children?: React.ReactNode;\n}\n\nfunction _ToggleButton(props: ExpandProps<ToggleButtonProps>, ref) {\n  const {\n    testId = 'cf-ui-toggle-button',\n    children,\n    className,\n    isDisabled = false,\n    isActive = false,\n    icon,\n    onToggle,\n    size = 'medium',\n    ...otherProps\n  } = props;\n\n  const styles = getStyles({ isActive, isDisabled });\n\n  const handleToggle = () => {\n    if (!isDisabled && onToggle) {\n      onToggle();\n    }\n  };\n\n  return (\n    <Button\n      testId={testId}\n      type=\"button\"\n      ref={ref}\n      size={size}\n      onClick={handleToggle}\n      className={cx(styles.toggleButton, className)}\n      startIcon={icon}\n      isDisabled={isDisabled}\n      aria-pressed={isActive}\n      data-state={isActive ? 'on' : 'off'}\n      {...otherProps}\n    >\n      {children}\n    </Button>\n  );\n}\n\n_ToggleButton.displayName = 'ToggleButton';\n\nexport const ToggleButton = React.forwardRef(_ToggleButton);\n","import React from 'react';\nimport { cx } from 'emotion';\nimport {\n  Flex,\n  Box,\n  type PolymorphicProps,\n  type PolymorphicComponent,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport { Spinner } from '@contentful/f36-spinner';\n\nimport type { ButtonInternalProps } from '../types';\nimport { getStyles } from './Button.styles';\n\nconst BUTTON_DEFAULT_TAG = 'button';\n\nexport type ButtonProps<\n  E extends React.ElementType = typeof BUTTON_DEFAULT_TAG,\n> = PolymorphicProps<ButtonInternalProps, E, 'disabled'>;\n\nfunction _Button<E extends React.ElementType = typeof BUTTON_DEFAULT_TAG>(\n  props: ButtonProps<E>,\n  ref: React.Ref<any>,\n) {\n  const styles = getStyles();\n  const {\n    as = BUTTON_DEFAULT_TAG,\n    children,\n    className,\n    testId = 'cf-ui-button',\n    variant = 'secondary',\n    size = 'medium',\n    startIcon,\n    endIcon,\n    isActive,\n    isDisabled,\n    isLoading,\n    isFullWidth,\n    style,\n    ...otherProps\n  } = props;\n\n  const rootClassNames = cx(\n    styles.button({\n      variant,\n      size,\n      isActive,\n      isDisabled,\n      isFullWidth,\n    }),\n    className,\n  );\n\n  const iconContent = (icon) => {\n    const defaultIconColor: {\n      [Property in ButtonInternalProps['variant']]: string;\n    } = {\n      primary: 'white',\n      secondary: 'secondary',\n      positive: 'white',\n      negative: 'negative',\n      transparent: 'secondary',\n    };\n\n    return (\n      !isLoading && (\n        <Flex\n          as=\"span\"\n          className={styles.buttonIcon({ hasChildren: !!children, variant })}\n        >\n          {React.cloneElement(icon, {\n            size: icon.props.size ?? `${size === 'large' ? 'medium' : 'small'}`,\n            // we want to allow variants for icons for transparent buttons\n            variant:\n              (variant === 'transparent' && icon.props.variant) ||\n              defaultIconColor[variant],\n          })}\n        </Flex>\n      )\n    );\n  };\n\n  const commonContent = (\n    <>\n      {startIcon && iconContent(startIcon)}\n      {children && (\n        <Box as=\"span\" display=\"block\" className={styles.buttonContent}>\n          {children}\n        </Box>\n      )}\n      {endIcon && iconContent(endIcon)}\n      {isLoading && (\n        <Box\n          as=\"span\"\n          marginLeft={children || !isLoading ? 'spacingXs' : 'none'}\n        >\n          <Spinner\n            customSize={18}\n            variant={\n              variant === 'secondary' || variant === 'negative'\n                ? 'default'\n                : 'white'\n            }\n          />\n        </Box>\n      )}\n    </>\n  );\n\n  const commonProps = {\n    ['data-test-id']: testId,\n    className: rootClassNames,\n    ref: ref,\n    style,\n  };\n\n  if (as === 'a') {\n    return (\n      <a {...otherProps} {...commonProps} disabled={isDisabled}>\n        {commonContent}\n      </a>\n    );\n  }\n\n  return (\n    <button\n      type=\"button\"\n      {...otherProps}\n      {...commonProps}\n      disabled={isDisabled}\n    >\n      {commonContent}\n    </button>\n  );\n}\n\n_Button.displayName = 'Button';\n\n/**\n * @description: Buttons communicate the action that will occur when the user clicks it\n */\nexport const Button: PolymorphicComponent<\n  ExpandProps<ButtonInternalProps>,\n  typeof BUTTON_DEFAULT_TAG,\n  'disabled'\n> = React.forwardRef(_Button);\n","import { css } from 'emotion';\nimport type { CSSObject } from '@emotion/serialize';\nimport tokens from '@contentful/f36-tokens';\nimport { ButtonSize, ButtonVariant, ButtonStylesProps } from '../types';\nimport { hexToRGBA } from '@contentful/f36-utils';\n\nconst variantActiveStyles = (variant: ButtonVariant): CSSObject => {\n  switch (variant) {\n    case 'primary':\n      return { backgroundColor: tokens.blue700 };\n    case 'secondary':\n      return { backgroundColor: tokens.gray200 };\n    case 'positive':\n      return { backgroundColor: tokens.green700 };\n    case 'negative':\n      return { backgroundColor: tokens.gray200 };\n    case 'transparent':\n      return { backgroundColor: hexToRGBA(tokens.gray900, 0.1) };\n    default:\n      return {};\n  }\n};\n\nconst variantToStyles = (variant: ButtonVariant): CSSObject => {\n  switch (variant) {\n    case 'primary':\n      return {\n        color: tokens.colorWhite,\n        backgroundColor: tokens.blue500,\n        borderColor: 'transparent',\n        '&:hover': {\n          backgroundColor: tokens.blue600,\n          color: tokens.colorWhite,\n        },\n        '&:active': variantActiveStyles(variant),\n        '&:focus-visible': {\n          boxShadow: tokens.glowPrimary,\n        },\n      };\n    case 'secondary':\n      return {\n        color: tokens.gray900,\n        backgroundColor: tokens.colorWhite,\n        borderColor: tokens.gray300,\n        '&:hover': {\n          backgroundColor: tokens.gray100,\n          color: tokens.gray900,\n        },\n        '&:active': variantActiveStyles(variant),\n        '&:focus': {\n          boxShadow: tokens.glowPrimary,\n        },\n        '&:focus:not(:focus-visible)': {\n          boxShadow: 'unset',\n        },\n        '&:focus-visible': {\n          boxShadow: tokens.glowPrimary,\n        },\n      };\n    case 'positive':\n      return {\n        color: tokens.colorWhite,\n        backgroundColor: tokens.green500,\n        borderColor: 'transparent',\n        '&:hover': {\n          backgroundColor: tokens.green600,\n          color: tokens.colorWhite,\n        },\n        '&:active': variantActiveStyles(variant),\n        '&:focus-visible': {\n          boxShadow: tokens.glowPositive,\n        },\n      };\n    case 'negative':\n      return {\n        color: tokens.red600,\n        backgroundColor: tokens.colorWhite,\n        borderColor: tokens.gray300,\n        '&:hover': {\n          backgroundColor: tokens.gray100,\n          color: tokens.red600,\n        },\n        '&:active': variantActiveStyles(variant),\n        '&:focus-visible': {\n          boxShadow: tokens.glowNegative,\n        },\n      };\n    case 'transparent':\n      return {\n        color: tokens.gray900,\n        background: 'none',\n        borderColor: 'transparent',\n        boxShadow: 'none',\n        '&:hover': {\n          backgroundColor: hexToRGBA(tokens.gray900, 0.05),\n        },\n        '&:active': variantActiveStyles(variant),\n        '&:focus': {\n          boxShadow: tokens.glowPrimary,\n        },\n        '&:focus:not(:focus-visible)': {\n          boxShadow: 'unset',\n        },\n        '&:focus-visible': {\n          boxShadow: tokens.glowPrimary,\n        },\n      };\n    default:\n      return {};\n  }\n};\n\nconst sizeToStyles = (size: ButtonSize): CSSObject => {\n  switch (size) {\n    case 'small':\n      return {\n        fontSize: tokens.fontSizeM,\n        lineHeight: tokens.lineHeightCondensed,\n        padding: `${tokens.spacing2Xs} ${tokens.spacingS}`,\n        minHeight: '32px',\n      };\n    case 'medium':\n      return {\n        fontSize: tokens.fontSizeM,\n        lineHeight: tokens.lineHeightCondensed,\n        padding: `${tokens.spacingXs} ${tokens.spacingM}`,\n        minHeight: '40px',\n      };\n    case 'large':\n      return {\n        fontSize: tokens.fontSizeXl,\n        lineHeight: tokens.lineHeightXl,\n        padding: `${tokens.spacingXs} ${tokens.spacingM}`,\n        minHeight: '48px',\n      };\n    default:\n      return {};\n  }\n};\n\nconst getButtonIconStyle = ({ hasChildren, variant }) => {\n  const align = {\n    '&:first-child': { marginRight: tokens.spacing2Xs },\n    '&:last-child': { marginLeft: tokens.spacing2Xs },\n  };\n\n  const margin = hasChildren ? align : {};\n\n  return css([\n    margin,\n    // we want to allow variants for icons, but only in the transparent IconButton\n    variant !== 'transparent' &&\n      hasChildren && {\n        '& svg': {\n          fill: 'currentColor',\n        },\n      },\n  ]);\n};\n\nexport const getStyles = () => ({\n  button: ({\n    variant,\n    size,\n    isActive,\n    isDisabled,\n    isFullWidth,\n  }: ButtonStylesProps) =>\n    css({\n      boxSizing: 'border-box',\n      border: `1px solid`,\n      boxShadow: '0px 1px 0px rgb(25, 37, 50, 0.08)',\n      borderRadius: tokens.borderRadiusMedium,\n      cursor: isDisabled ? 'not-allowed' : 'pointer',\n      fontFamily: tokens.fontStackPrimary,\n      opacity: isDisabled ? 0.5 : 1,\n      display: isFullWidth ? 'flex' : 'inline-flex',\n      minWidth: isFullWidth ? '100%' : 'auto',\n      maxWidth: isFullWidth ? '100%' : '240px',\n      overflow: 'hidden',\n      flexShrink: 0,\n      justifyContent: 'center',\n      alignItems: 'center',\n      fontWeight: tokens.fontWeightMedium,\n      outline: 'none',\n      textDecoration: 'none',\n      margin: 0, // remove the default margin in Safari.\n      transition: `background ${tokens.transitionDurationShort} ${tokens.transitionEasingDefault},\n        opacity ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault},\n        border-color ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}`,\n      ...variantToStyles(variant),\n      ...sizeToStyles(size),\n      ...(isActive\n        ? {\n            transition: 'none',\n            '&, &:focus': variantActiveStyles(variant),\n          }\n        : {}),\n    }),\n  buttonIcon: getButtonIconStyle,\n  buttonContent: css({\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  }),\n});\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { GetStyleArguments } from './types';\n\nconst getToggleButtonStyle = ({ isActive, isDisabled }: GetStyleArguments) => {\n  const activeStyle = {\n    background: tokens.blue100,\n    borderColor: tokens.blue600,\n    '&': {\n      zIndex: tokens.zIndexDefault + 1,\n    },\n    '&:hover': {\n      background: tokens.blue100,\n    },\n  };\n\n  const baseStyle = {\n    '&:focus': {\n      boxShadow: tokens.glowPrimary,\n    },\n    '&:focus-visible:not([disabled])': {\n      zIndex: tokens.zIndexDefault + 2,\n    },\n    '&:active, &:active:hover': isDisabled\n      ? {\n          background: tokens.colorWhite,\n          borderColor: tokens.gray300,\n        }\n      : {\n          background: tokens.blue100,\n          borderColor: tokens.blue600,\n        },\n  };\n\n  if (isActive) {\n    return {\n      ...baseStyle,\n      ...activeStyle,\n    };\n  }\n\n  return baseStyle;\n};\n\nexport default ({ isActive, isDisabled }: GetStyleArguments) => ({\n  toggleButton: css(getToggleButtonStyle({ isActive, isDisabled })),\n});\n","import React from 'react';\nimport type {\n  PolymorphicProps,\n  PolymorphicComponent,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { Button } from '../Button';\nimport type { ButtonInternalProps } from '../types';\n\ninterface IconButtonInternalProps\n  extends Omit<ButtonInternalProps, 'startIcon' | 'endIcon'> {\n  /**\n   * Expects any of the icon components\n   */\n  icon: React.ReactElement;\n  /**\n   * Aria label is required when using icon only\n   */\n  'aria-label': string;\n}\n\nconst ICON_BUTTON_DEFAULT_TAG = 'button';\n\nexport type IconButtonProps<\n  E extends React.ElementType = typeof ICON_BUTTON_DEFAULT_TAG,\n> = PolymorphicProps<IconButtonInternalProps, E, 'disabled'>;\n\nfunction _IconButton<\n  E extends React.ElementType = typeof ICON_BUTTON_DEFAULT_TAG,\n>(props: IconButtonProps<E>, ref: React.Ref<any>) {\n  const {\n    testId = 'cf-ui-icon-button',\n    variant = 'transparent',\n    icon,\n    ...otherProps\n  } = props;\n\n  return (\n    <Button\n      testId={testId}\n      ref={ref}\n      variant={variant}\n      {...otherProps}\n      startIcon={icon}\n    />\n  );\n}\n\n_IconButton.displayName = 'IconButton';\n\nexport const IconButton: PolymorphicComponent<\n  ExpandProps<IconButtonInternalProps>,\n  typeof ICON_BUTTON_DEFAULT_TAG,\n  'disabled'\n> = React.forwardRef(_IconButton);\n"],"mappings":";AI2LgG,OAAAA,CAAA,aACvE;AAA2D,SAAAC,KAAA,EAAAC,GAAA,EAAAC,IACtD,8BAA6B"},"metadata":{},"sourceType":"module","externalDependencies":[]}